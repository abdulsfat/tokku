// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id         String     @id @default(uuid())
  name       String
  userId     String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  banners    Banner[]   @relation("StoreToBanner")
  categories Category[] @relation("StoreToCategory")
  products   Product[]  @relation("StoreToProduct")
}

model Banner {
  id         String     @id @default(uuid())
  label      String
  imageUrl   String
  storeId    String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categories Category[]

  store Store @relation("StoreToBanner", fields: [storeId], references: [id])

  @@index([storeId])
}

model Category {
  id        String    @id @default(uuid())
  storeId   String
  bannerId  String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("CategoryToProduct")

  store  Store  @relation("StoreToCategory", fields: [storeId], references: [id])
  banner Banner @relation(fields: [bannerId], references: [id])

  @@index([storeId])
  @@index([bannerId])
}

model Product {
  id         String   @id @default(uuid())
  storeId    String
  categoryId String
  name       String
  price      Decimal
  isFeatured Boolean  @default(false)
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  images     Image[]  @relation("ProductToImage")

  store    Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  category Category @relation("CategoryToProduct", fields: [categoryId], references: [id])

  @@index([storeId])
  @@index([categoryId])
}

model Image {
  id        String   @unique @default(uuid())
  productId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation("ProductToImage", fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}
